openapi: 3.0.0
info:
  title: Movie Ticket Booking API
  version: 1.0.0
  description: API for managing users in the movie ticket booking system
servers:
  - url: http://localhost:8080
    description: Local development server
tags:
  - name: Users
    description: User management operations
paths:

  /api/bookings:
    post:
      summary: Create a new booking
      tags:
        - Bookings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDto'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDto'
        '400':
          description: Bad request

  /api/bookings/user/{userId}:
    get:
      summary: Get bookings by user
      tags:
        - Bookings
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDto'

  /api/bookings/showtime/{showtimeId}:
    get:
      summary: Get bookings by showtime
      tags:
        - Bookings
      parameters:
        - name: showtimeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDto'

  /api/bookings/{bookingId}:
    delete:
      summary: Cancel a booking
      tags:
        - Bookings
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Booking cancelled successfully
        '404':
          description: Booking not found

  /api/bookings/available-seats/{showtimeId}:
    get:
      summary: Get available seats for a showtime
      tags:
        - Bookings
      parameters:
        - name: showtimeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /api/movies:
    get:
      summary: Get all movies
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MovieDto'
    post:
      summary: Add a new movie
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDto'
    /api/movies/{id}:
      get:
        summary: Get a movie by ID
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MovieDto'
      put:
        summary: Update a movie
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MovieDto'
        responses:
          '200':
            description: Successful response
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/MovieDto'
      delete:
        summary: Delete a movie
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
        responses:
          '204':
            description: Successful response

  /api/users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
  /api/users/login:
    post:
      summary: Authenticate a user
      tags:
        - Users
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Unauthorized
  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /api/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
    put:
      summary: Update user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
    delete:
      summary: Delete user
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found

/api/showtimes:
  post:
    summary: Add a new showtime
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShowtimeDto'
    responses:
      '201':
        description: Showtime created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowtimeDto'
      '400':
        description: Overlapping showtime or invalid request
  get:
    summary: Fetch all showtimes
    responses:
      '200':
        description: List of all showtimes
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ShowtimeDto'

  /api/showtimes/{id}:
    put:
      summary: Update a showtime
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShowtimeDto'
      responses:
        '200':
          description: Showtime updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShowtimeDto'
        '400':
          description: Overlapping showtime or invalid request
        '404':
          description: Showtime not found

    delete:
      summary: Delete a showtime by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Showtime deleted successfully
        '404':
          description: Showtime not found

  /api/showtimes/movie/{movieId}:
    get:
      summary: Fetch all showtimes for a specific movie
      parameters:
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of showtimes for the specified movie
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShowtimeDto'

  /api/showtimes/theater/{theaterId}:
    get:
      summary: Fetch all showtimes for a specific theater
      parameters:
        - name: theaterId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of showtimes for the specified theater
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShowtimeDto'

components:
  schemas:
    BookingDto:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        movieId:
          type: integer
        showtimeId:
          type: integer
        seatNumber:
          type: string
        price:
          type: integer

    MovieDto:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        genre:
          type: string
        durationMinutes:
          type: integer
        rating:
          type: integer
        releaseYear:
          type: integer

    UserRegistrationRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          format: password
          example: password123
        role:
          type: string
          enum: [CUSTOMER, ADMIN]
          example: CUSTOMER
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: John Updated
        email:
          type: string
          format: email
          example: john_updated@example.com
        role:
          type: string
          enum: [CUSTOMER, ADMIN]
          example: ADMIN
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        role:
          type: string
          enum: [CUSTOMER, ADMIN]
          example: CUSTOMER

    schemas:
      ShowtimeDto:
        type: object
        properties:
          id:
            type: integer
          movieId:
            type: integer
          theaterId:
            type: integer
          startTime:
            type: string
            format: date-time
          endTime:
            type: string
            format: date-time

